// Code generated by MockGen. DO NOT EDIT.
// Source: internal/coupon/coupon.go
//
// Generated by this command:
//
//	mockgen --source=internal/coupon/coupon.go --destination=internal/mocks/mock_coupon.go --package=mocks --mock_names=Repository=MockCouponRepository,Service=MockCouponService,Server=MockCouponServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	uuid "github.com/google/uuid"
	coupon "github.com/nachoconques0/schwarz-challenge/internal/coupon"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockCouponService is a mock of Service interface.
type MockCouponService struct {
	ctrl     *gomock.Controller
	recorder *MockCouponServiceMockRecorder
}

// MockCouponServiceMockRecorder is the mock recorder for MockCouponService.
type MockCouponServiceMockRecorder struct {
	mock *MockCouponService
}

// NewMockCouponService creates a new mock instance.
func NewMockCouponService(ctrl *gomock.Controller) *MockCouponService {
	mock := &MockCouponService{ctrl: ctrl}
	mock.recorder = &MockCouponServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponService) EXPECT() *MockCouponServiceMockRecorder {
	return m.recorder
}

// CreateCoupon mocks base method.
func (m *MockCouponService) CreateCoupon(arg0 coupon.CreateRequest) (*coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoupon", arg0)
	ret0, _ := ret[0].(*coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockCouponServiceMockRecorder) CreateCoupon(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockCouponService)(nil).CreateCoupon), arg0)
}

// ListCoupons mocks base method.
func (m *MockCouponService) ListCoupons() ([]coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoupons")
	ret0, _ := ret[0].([]coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoupons indicates an expected call of ListCoupons.
func (mr *MockCouponServiceMockRecorder) ListCoupons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoupons", reflect.TypeOf((*MockCouponService)(nil).ListCoupons))
}

// MockCouponRepository is a mock of Repository interface.
type MockCouponRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCouponRepositoryMockRecorder
}

// MockCouponRepositoryMockRecorder is the mock recorder for MockCouponRepository.
type MockCouponRepositoryMockRecorder struct {
	mock *MockCouponRepository
}

// NewMockCouponRepository creates a new mock instance.
func NewMockCouponRepository(ctrl *gomock.Controller) *MockCouponRepository {
	mock := &MockCouponRepository{ctrl: ctrl}
	mock.recorder = &MockCouponRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponRepository) EXPECT() *MockCouponRepositoryMockRecorder {
	return m.recorder
}

// CreateCoupon mocks base method.
func (m *MockCouponRepository) CreateCoupon(arg0 *coupon.Coupon) (*coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCoupon", arg0)
	ret0, _ := ret[0].(*coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockCouponRepositoryMockRecorder) CreateCoupon(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockCouponRepository)(nil).CreateCoupon), arg0)
}

// GetCouponForUpdate mocks base method.
func (m *MockCouponRepository) GetCouponForUpdate(arg0 *gorm.DB, arg1 uuid.UUID) (*coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCouponForUpdate", arg0, arg1)
	ret0, _ := ret[0].(*coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCouponForUpdate indicates an expected call of GetCouponForUpdate.
func (mr *MockCouponRepositoryMockRecorder) GetCouponForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCouponForUpdate", reflect.TypeOf((*MockCouponRepository)(nil).GetCouponForUpdate), arg0, arg1)
}

// ListCoupons mocks base method.
func (m *MockCouponRepository) ListCoupons() ([]coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCoupons")
	ret0, _ := ret[0].([]coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCoupons indicates an expected call of ListCoupons.
func (mr *MockCouponRepositoryMockRecorder) ListCoupons() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCoupons", reflect.TypeOf((*MockCouponRepository)(nil).ListCoupons))
}

// UpdateCoupon mocks base method.
func (m *MockCouponRepository) UpdateCoupon(arg0 *gorm.DB, arg1 *coupon.Coupon) (*coupon.Coupon, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCoupon", arg0, arg1)
	ret0, _ := ret[0].(*coupon.Coupon)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateCoupon indicates an expected call of UpdateCoupon.
func (mr *MockCouponRepositoryMockRecorder) UpdateCoupon(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCoupon", reflect.TypeOf((*MockCouponRepository)(nil).UpdateCoupon), arg0, arg1)
}

// MockCouponServer is a mock of Server interface.
type MockCouponServer struct {
	ctrl     *gomock.Controller
	recorder *MockCouponServerMockRecorder
}

// MockCouponServerMockRecorder is the mock recorder for MockCouponServer.
type MockCouponServerMockRecorder struct {
	mock *MockCouponServer
}

// NewMockCouponServer creates a new mock instance.
func NewMockCouponServer(ctrl *gomock.Controller) *MockCouponServer {
	mock := &MockCouponServer{ctrl: ctrl}
	mock.recorder = &MockCouponServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCouponServer) EXPECT() *MockCouponServerMockRecorder {
	return m.recorder
}

// CreateCoupon mocks base method.
func (m *MockCouponServer) CreateCoupon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateCoupon", w, r)
}

// CreateCoupon indicates an expected call of CreateCoupon.
func (mr *MockCouponServerMockRecorder) CreateCoupon(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCoupon", reflect.TypeOf((*MockCouponServer)(nil).CreateCoupon), w, r)
}

// LisCoupons mocks base method.
func (m *MockCouponServer) LisCoupons(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "LisCoupons", w, r)
}

// LisCoupons indicates an expected call of LisCoupons.
func (mr *MockCouponServerMockRecorder) LisCoupons(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LisCoupons", reflect.TypeOf((*MockCouponServer)(nil).LisCoupons), w, r)
}
