// Code generated by MockGen. DO NOT EDIT.
// Source: internal/shopping_cart/shopping_cart.go
//
// Generated by this command:
//
//	mockgen --source=internal/shopping_cart/shopping_cart.go --destination=internal/mocks/mock_shopping_cart.go --package=mocks --mock_names=Repository=MockShoppingCartRepository,Service=MockShoppingCartService,Server=MockShoppingCartServer
//

// Package mocks is a generated GoMock package.
package mocks

import (
	http "net/http"
	reflect "reflect"

	uuid "github.com/google/uuid"
	shoppingcart "github.com/nachoconques0/schwarz-challenge/internal/shopping_cart"
	gomock "go.uber.org/mock/gomock"
	gorm "gorm.io/gorm"
)

// MockShoppingCartService is a mock of Service interface.
type MockShoppingCartService struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartServiceMockRecorder
}

// MockShoppingCartServiceMockRecorder is the mock recorder for MockShoppingCartService.
type MockShoppingCartServiceMockRecorder struct {
	mock *MockShoppingCartService
}

// NewMockShoppingCartService creates a new mock instance.
func NewMockShoppingCartService(ctrl *gomock.Controller) *MockShoppingCartService {
	mock := &MockShoppingCartService{ctrl: ctrl}
	mock.recorder = &MockShoppingCartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartService) EXPECT() *MockShoppingCartServiceMockRecorder {
	return m.recorder
}

// ApplyCoupon mocks base method.
func (m *MockShoppingCartService) ApplyCoupon(arg0, arg1 uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ApplyCoupon", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// ApplyCoupon indicates an expected call of ApplyCoupon.
func (mr *MockShoppingCartServiceMockRecorder) ApplyCoupon(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCoupon", reflect.TypeOf((*MockShoppingCartService)(nil).ApplyCoupon), arg0, arg1)
}

// CreateShoppingCart mocks base method.
func (m *MockShoppingCartService) CreateShoppingCart(arg0 shoppingcart.CreateRequest) (*shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCart", arg0)
	ret0, _ := ret[0].(*shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockShoppingCartServiceMockRecorder) CreateShoppingCart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockShoppingCartService)(nil).CreateShoppingCart), arg0)
}

// ListShoppingCarts mocks base method.
func (m *MockShoppingCartService) ListShoppingCarts() ([]shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCarts")
	ret0, _ := ret[0].([]shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCarts indicates an expected call of ListShoppingCarts.
func (mr *MockShoppingCartServiceMockRecorder) ListShoppingCarts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCarts", reflect.TypeOf((*MockShoppingCartService)(nil).ListShoppingCarts))
}

// MockShoppingCartRepository is a mock of Repository interface.
type MockShoppingCartRepository struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartRepositoryMockRecorder
}

// MockShoppingCartRepositoryMockRecorder is the mock recorder for MockShoppingCartRepository.
type MockShoppingCartRepositoryMockRecorder struct {
	mock *MockShoppingCartRepository
}

// NewMockShoppingCartRepository creates a new mock instance.
func NewMockShoppingCartRepository(ctrl *gomock.Controller) *MockShoppingCartRepository {
	mock := &MockShoppingCartRepository{ctrl: ctrl}
	mock.recorder = &MockShoppingCartRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartRepository) EXPECT() *MockShoppingCartRepositoryMockRecorder {
	return m.recorder
}

// BeginTransaction mocks base method.
func (m *MockShoppingCartRepository) BeginTransaction() *gorm.DB {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BeginTransaction")
	ret0, _ := ret[0].(*gorm.DB)
	return ret0
}

// BeginTransaction indicates an expected call of BeginTransaction.
func (mr *MockShoppingCartRepositoryMockRecorder) BeginTransaction() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeginTransaction", reflect.TypeOf((*MockShoppingCartRepository)(nil).BeginTransaction))
}

// CommitTransaction mocks base method.
func (m *MockShoppingCartRepository) CommitTransaction(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CommitTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CommitTransaction indicates an expected call of CommitTransaction.
func (mr *MockShoppingCartRepositoryMockRecorder) CommitTransaction(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CommitTransaction", reflect.TypeOf((*MockShoppingCartRepository)(nil).CommitTransaction), tx)
}

// CreateShoppingCart mocks base method.
func (m *MockShoppingCartRepository) CreateShoppingCart(arg0 *shoppingcart.ShoppingCart) (*shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateShoppingCart", arg0)
	ret0, _ := ret[0].(*shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockShoppingCartRepositoryMockRecorder) CreateShoppingCart(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockShoppingCartRepository)(nil).CreateShoppingCart), arg0)
}

// GetShoppingCartForUpdate mocks base method.
func (m *MockShoppingCartRepository) GetShoppingCartForUpdate(arg0 *gorm.DB, arg1 uuid.UUID) (*shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetShoppingCartForUpdate", arg0, arg1)
	ret0, _ := ret[0].(*shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetShoppingCartForUpdate indicates an expected call of GetShoppingCartForUpdate.
func (mr *MockShoppingCartRepositoryMockRecorder) GetShoppingCartForUpdate(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetShoppingCartForUpdate", reflect.TypeOf((*MockShoppingCartRepository)(nil).GetShoppingCartForUpdate), arg0, arg1)
}

// ListShoppingCarts mocks base method.
func (m *MockShoppingCartRepository) ListShoppingCarts() ([]shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListShoppingCarts")
	ret0, _ := ret[0].([]shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListShoppingCarts indicates an expected call of ListShoppingCarts.
func (mr *MockShoppingCartRepositoryMockRecorder) ListShoppingCarts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCarts", reflect.TypeOf((*MockShoppingCartRepository)(nil).ListShoppingCarts))
}

// RollbackTransaction mocks base method.
func (m *MockShoppingCartRepository) RollbackTransaction(tx *gorm.DB) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RollbackTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// RollbackTransaction indicates an expected call of RollbackTransaction.
func (mr *MockShoppingCartRepositoryMockRecorder) RollbackTransaction(tx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RollbackTransaction", reflect.TypeOf((*MockShoppingCartRepository)(nil).RollbackTransaction), tx)
}

// UpdateShoppingCart mocks base method.
func (m *MockShoppingCartRepository) UpdateShoppingCart(arg0 *gorm.DB, arg1 *shoppingcart.ShoppingCart) (*shoppingcart.ShoppingCart, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShoppingCart", arg0, arg1)
	ret0, _ := ret[0].(*shoppingcart.ShoppingCart)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateShoppingCart indicates an expected call of UpdateShoppingCart.
func (mr *MockShoppingCartRepositoryMockRecorder) UpdateShoppingCart(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShoppingCart", reflect.TypeOf((*MockShoppingCartRepository)(nil).UpdateShoppingCart), arg0, arg1)
}

// MockShoppingCartServer is a mock of Server interface.
type MockShoppingCartServer struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingCartServerMockRecorder
}

// MockShoppingCartServerMockRecorder is the mock recorder for MockShoppingCartServer.
type MockShoppingCartServerMockRecorder struct {
	mock *MockShoppingCartServer
}

// NewMockShoppingCartServer creates a new mock instance.
func NewMockShoppingCartServer(ctrl *gomock.Controller) *MockShoppingCartServer {
	mock := &MockShoppingCartServer{ctrl: ctrl}
	mock.recorder = &MockShoppingCartServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShoppingCartServer) EXPECT() *MockShoppingCartServerMockRecorder {
	return m.recorder
}

// ApplyCoupon mocks base method.
func (m *MockShoppingCartServer) ApplyCoupon(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ApplyCoupon", w, r)
}

// ApplyCoupon indicates an expected call of ApplyCoupon.
func (mr *MockShoppingCartServerMockRecorder) ApplyCoupon(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ApplyCoupon", reflect.TypeOf((*MockShoppingCartServer)(nil).ApplyCoupon), w, r)
}

// CreateShoppingCart mocks base method.
func (m *MockShoppingCartServer) CreateShoppingCart(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CreateShoppingCart", w, r)
}

// CreateShoppingCart indicates an expected call of CreateShoppingCart.
func (mr *MockShoppingCartServerMockRecorder) CreateShoppingCart(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateShoppingCart", reflect.TypeOf((*MockShoppingCartServer)(nil).CreateShoppingCart), w, r)
}

// ListShoppingCarts mocks base method.
func (m *MockShoppingCartServer) ListShoppingCarts(w http.ResponseWriter, r *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ListShoppingCarts", w, r)
}

// ListShoppingCarts indicates an expected call of ListShoppingCarts.
func (mr *MockShoppingCartServerMockRecorder) ListShoppingCarts(w, r any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListShoppingCarts", reflect.TypeOf((*MockShoppingCartServer)(nil).ListShoppingCarts), w, r)
}
